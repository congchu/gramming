<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="https://congchu.github.io//tag/studying-programming/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://congchu.github.io/" rel="alternate" type="text/html" />
  <updated>2019-03-24T17:43:44+07:00</updated>
  <id>https://congchu.github.io//tag/studying-programming/feed.xml</id>

  
  
  

  
    <title type="html">Gramming | </title>
  

  

  

  
    
      
    
      
    
  

  
  

  
    <entry>
      <title type="html">CPU 스케줄링 기법 (선점 스케줄링, 비선점 스케줄링)</title>
      <link href="https://congchu.github.io" rel="alternate" type="text/html" title="CPU 스케줄링 기법 (선점 스케줄링, 비선점 스케줄링)" />
      <published>2019-03-24T17:00:00+07:00</published>
      <updated>2019-03-24T17:00:00+07:00</updated>
      <id>https://congchu.github.io//preamtree-cpu-scheduling</id>
      <content type="html" xml:base="https://congchu.github.io/{| absolute_url | xml_escape }}">&lt;p&gt;※ 같이 보면 좋은 포스팅: &lt;a href=&quot;https://preamtree.tistory.com/10&quot;&gt;Process와 Thread의 비교&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;프로세스(Process)가 구동하려면 다양한 시스템 자원이 필요하다. 대표적으로 CPU(중앙처리장치)와 입출력장치가 있는데, &lt;strong&gt;최고의 성능을 내기 위해 자원을 어떤 프로세스에 얼마나 할당하는지 정책을 만드는 것&lt;/strong&gt;을 CPU스케줄링이라고 한다. CPU스케줄링에 대해 알아보기 전에, 왜 필요한지 짚고 넘어갈 필요가 있다. (스케줄링 기법에 어떤 것들이 있는지 외우는 것보다 중요하다.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;
&lt;a href=&quot;https://preamtree.tistory.com/19&quot; targer=&quot;_blank&quot;&gt;
&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/27033450580366160E&quot; alt=&quot;그림1&quot; /&gt;
&lt;/a&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-cpu-스케줄링을-배우는-이유&quot;&gt;1. CPU 스케줄링을 배우는 이유&lt;/h2&gt;
&lt;p&gt;라면을 끓일 때, 물이 끓을 때까지 멍하니 기다리지는 않을 것이다. 라면 봉투를 미리 뜯어 놓기, 스프 미리넣기, 각종 재료를 미리 준비하기 등을 물이 끓는 것을 기다리면서 할 것이다. 여기서 CPU스케줄링을 착안하면 되겠다. 프로세스는 작업(Job)을 완료할 때까지 다양한 상태가 되는데, 우리가 주목해야할 것은 ‘Waiting’이다.&lt;/p&gt;

&lt;p&gt;프로세스가 CPU를 점유하여 작업을 수행하는 도중 I/O 또는 Interrupt가 발생하면 일시적으로 프로세스는 CPU를 사용하지 않게 된다. 하지만 계속 점유하고 있다. 이러한 상황을 줄여, CPU를 최대한 활용하면 시스템의 성능 개선을 꾀할 수 있다. 결국, “어떻게 프로세스들이 CPU를 효율적으로 사용하게 할 것인가?” 라는 고민에서 CPU 스케줄링이 출발한다고 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;
&lt;a href=&quot;https://preamtree.tistory.com/19&quot; targer=&quot;_blank&quot;&gt;
&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/2523283358036A5C1C&quot; alt=&quot;그림2&quot; /&gt;
&lt;/a&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;본격적으로 CPU 스케줄링에 대해 알아보겠다. CPU 스케줄링은 크게 두 가지로 분류되는데, 선점(Preemptive)스케줄링과 비선점(Non-Preemptive)스케줄링이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2선점--비선점-스케줄링&quot;&gt;2.선점 &amp;amp; 비선점 스케줄링&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;CPU가 이미 점유 중일 때, 우선 순위가 높은 프로세스가 CPU를 차지할 수 있음&lt;/li&gt;
  &lt;li&gt;우선 순위가 높은 프로세스를 빠르게 처리해야할 경우 유용함.&lt;/li&gt;
  &lt;li&gt;선점이 일어날 경우, 오버헤드가 발생하며 처리시간을 예측하기 힘듦.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;선점 스케줄링의 경우 위와 같은 특징이 있으며, &lt;strong&gt;비선점 스케줄링은 선점 스케줄링과 반대&lt;/strong&gt;이다. 선점 스케줄링의 경우에는 I/O요청, I/O응답, Interrupt발생, 작업완료 등의 상황에서 스케줄링이 일어날 수 있다. 하지만 비선점 스케줄링의 경우 프로세스가 스스로 CPU를 놓아주는 시점(작업이 완료되는 시점)에만 스케줄링이 일어난다.&lt;/p&gt;

&lt;p&gt;(비)선점 스케줄링에 각각 속하는 CPU 스케줄링 알고리즘 기법은 다양하다. 그 알고리즘에 대해 간략히 소개하도록 하겠다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-1-선점-스케줄링&quot;&gt;2-1. 선점 스케줄링&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1-1. SRT(Shortest Remaining Time) 스케줄링&lt;/strong&gt;: 짧은 시간 순서대로 프로세스를 수행한다. 남은 처리 시간이 더 짧은 프로세스가 Ready 큐에 들어오면 그 프로세스가 바로 선점됨. 아래에 소개할 SJF의 선점 버전이라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1-2. 라운드로빈(Round-Robin)스케줄링&lt;/strong&gt;: 각 프로세스는 같은 크기의 CPU 시간을 할당 받고 선입선출에 의해 행된다. 할당시간이 너무 크면 선입선출과 다를 바가 없어지고, 너무 작으면 오버헤드가 너무 커진다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1-3. 다단계 큐(Multi-level Queue) 스케줄링&lt;/strong&gt;: Ready큐를 여러 개 사용하는 기법. 각각의 큐는 자신의 스케줄링 알고리즘을 수행하며, 큐와 큐 사이에도 우선순위를 부여한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1-4. 다단계 피드백 큐 스케줄링&lt;/strong&gt;: 다단계 큐와 비슷하나 프로세스들이 큐를 이동할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-2-비선점-스케줄링&quot;&gt;2-2. 비선점 스케줄링&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1-1.  HRN(Highest response ratio next) 스케줄링&lt;/strong&gt;: 긴 작업과 짧은 작업간의 지나친 불평등을 어느 정도 보완한 기법. 수행시간의 길이와 대기 시간을 모두 고려해 우선순위를 정한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1-2. SJF(Shortest Job First) 스케줄링&lt;/strong&gt;: 큐 안에 있는 프로세스 중 수행시간이 짧은 것을 먼저 수행. 평균 대기 시간을 감소시킨다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1-3. 우선순위(priority) 스케줄링&lt;/strong&gt;: 프로세스에게 우선순위를 정적, 혹은 동적으로 부여하여 우선순위가 높은 순서대로 처리한다. 동적으로 부여할 경우, 구현이 복잡하고 오버헤드가 많다는 단점이 있으나, 시스템의 응답속도를 증가시킨다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1-4. 기한부(Deadline) 스케줄링&lt;/strong&gt;: 작업을 명시된 시간이나 기한 내에 완료하도록 계획.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1-5. FIFO 스케줄링&lt;/strong&gt;: 프로세스들은 Ready큐에 도착한 순서대로 CPU를 할당 받는다. 작업 완료 시간을 예측하기 매우 용이하다. 하지만 덜 중요한 작업이 중요한 작업을 기다리게 할 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;지금까지 CPU 스케줄링과 알고리즘에 대해 간략히 알아보았다. CPU 스케줄링은 운영체제가 사용자도 모르는 새 자동으로 진행하는 작업이다. 프로세스와 비슷한 성질을 띠는 스레드의 경우, 프로그램 개발자가 스케줄링 관련 코드를 삽입해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
-끝-
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;center&gt;
이 글은 &lt;b&gt;https://preamtree.tistory.com/19&lt;/b&gt; 을 재구성하여 작성됐습니다.&lt;br /&gt;
&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;&lt;img alt=&quot;크리에이티브 커먼즈 라이선스&quot; style=&quot;border-width:0&quot; src=&quot;https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png&quot; /&gt;&lt;/a&gt;
&lt;/center&gt;</content>

      
      
      
      
      

      <author>
          <name>preamtree</name>
        
        
      </author>

      

      
        <category term="Studying Programming" />
      

      
        <summary type="html">※ 같이 보면 좋은 포스팅: Process와 Thread의 비교</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">교착상태(Deadlock)와 식사하는 철학자들(Dining Philosophers)</title>
      <link href="https://congchu.github.io" rel="alternate" type="text/html" title="교착상태(Deadlock)와 식사하는 철학자들(Dining Philosophers)" />
      <published>2019-03-01T17:00:00+07:00</published>
      <updated>2019-03-01T17:00:00+07:00</updated>
      <id>https://congchu.github.io//preamtree-deadlock-dining-philosophers</id>
      <content type="html" xml:base="https://congchu.github.io/{| absolute_url | xml_escape }}">&lt;p&gt;&lt;strong&gt;교착상태(DeadLock)&lt;/strong&gt; 는 두 개 이상의 작업이 서로 상대방의 작업이 끝나기 만을 기다리고 있기 때문에 결과적으로 아무것도 완료되지 못하는 상태를 가리킨다.
&lt;br /&gt; 컴퓨터 쪽으로 해석을 해 본다면, 운영체제나 소프트웨어가 자원(Resource)관리를 잘못하여 둘 이상의 프로그램이 다운되거나 운영체제가 멈춰버리는 현상이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;
&lt;a href=&quot;https://preamtree.tistory.com/18&quot; targer=&quot;_blank&quot;&gt;
&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/21240A485803145830&quot; alt=&quot;그림1&quot; /&gt;
&lt;/a&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;교착상태의-발생조건&quot;&gt;교착상태의 발생조건&lt;/h2&gt;
&lt;p&gt;교착상태가 발생하는 조건은 4가지가 있는데, 4가지 모두 만족해야만 교착상태가 일어난다. 조건 4가지는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;상호 배제(Mutual exclusion)&lt;/li&gt;
  &lt;li&gt;점유 상태로 대기(Hold and wait)&lt;/li&gt;
  &lt;li&gt;선점 불가(No preemption)&lt;/li&gt;
  &lt;li&gt;순환성 대기(Circular wait)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-상호-배제mutual-exclusion&quot;&gt;1. 상호 배제(Mutual exclusion)&lt;/h3&gt;

&lt;p&gt;상호 배제는 프로그램들이 공유 자원을 동시에 쓸 수 없는 상황을 일컫는다. 상호 배제를 해제하는 것은 가장 확실한 교착상태 제거 방법이지만 잘 사용하지 않는다. 너무 엄격하기 때문이다. 줄여서 Mutex라고도 부른다. 자세한 것은 &lt;a href=&quot;https://preamtree.tistory.com/26&quot;&gt;여기&lt;/a&gt;를 눌러 확인할 수 있다.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-점유-상태로-대기-hold-and-wait&quot;&gt;2. 점유 상태로 대기 (Hold and wait)&lt;/h3&gt;

&lt;p&gt;말 그대로 (공유)자원을 점유한 상태에서 다른 자원을 기다린다는 것. 할당받은 자원을 사용하지 않으면서 계속 점유하면 그 자원이 필요한 프로세스는 계속 대기하게 된다. 여기에 더하여 만약 순환성 대기(A-&amp;gt;B-&amp;gt;C-&amp;gt;A)가 발생한다면…
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-선점-불가no-preemption&quot;&gt;3. 선점 불가(No preemption)&lt;/h3&gt;

&lt;p&gt;자원을 어떤 프로세스가 점유 중일 때, 다른 프로세스가 그 자원을 뺏을 수 없다는 것이다. 하지만 앞서 언급한 ‘점유 상태로 대기’와 같은 특수한 상황이 아니라면 자원을 뺏어오는 것은 매우 위험하다.
&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-순환성-대기circular-wait&quot;&gt;4. 순환성 대기(Circular wait)&lt;/h3&gt;

&lt;p&gt;대기가 꼬리에 꼬리를 문 상황이다. 연쇄 대기를 해결하려고 해도 결국 자기 자신으로 돌아와 버리니 해결할 수가 없다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;식사하는-철학자들dining-philosopher&quot;&gt;식사하는 철학자들(Dining Philosopher)&lt;/h2&gt;
&lt;p&gt;이제 식사하는 철학자(Dining Philosopher)에 대해 설명할 것이다. 식사하는 철학자 문제는 교착상태를 이해하는데 아주 좋은 예제이다.&lt;/p&gt;

&lt;p&gt;5명의 철학자가 원탁에 앉아 있고 각자의 앞에는 스파게티가 있다. 그리고 양 옆에 포크가 하나씩 있다. 각각의 철학자는 스파게티를 먹으려면 포크를 2개 사용해야하며, 다른 철학자에게 말을 걸 수 없고 포크를 빼앗을 수 없다는 조건이 있다. (아래 그림과 함께 보면 좋다.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;
&lt;a href=&quot;https://preamtree.tistory.com/18&quot; targer=&quot;_blank&quot;&gt;
&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/253CDD4B5802FBB52A&quot; alt=&quot;그림2&quot; /&gt;
&lt;/a&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이 상황에서 철학자들이 동시에 오른쪽 포크를 집어든다면? (철학자들이 프로세스, 포크가 자원이라고 생각하면 편하다.)
 &lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;철학자들은 포크를 공유할 수 없고&lt;b&gt;(상호 배제)&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;자신의 왼쪽에 앉은 철학자가 포크를 놓을 때까지 기다린다.&lt;b&gt;(점유 상태로 대기)&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;철학자들은 왼쪽 철학자의 포크를 빼앗을 방법이 없으며&lt;b&gt;(선점 불가)&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;각 철학자들은 자신의 왼쪽 철학자의 포크를 대기한다.&lt;b&gt;(순환대기)&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
위에서 다루었던 교착상태의 조건 4가지를 모두 만족했다. 그러므로 현재 교착상태이다. 이러한 교착 상태를 회피하려면 발생조건 4가지 중 한가지만 해제하면 된다.&lt;/p&gt;

&lt;p&gt;상호 배제와 선점 불가는 이 문제의 조건이므로 해소할 수 없다. ‘점유 상태로 대기’를 해제하려면 왼쪽 포크를 집을 수 없을 때, 오른쪽 포크를 식탁 위에 내려놓도록 하는 방법이 있다. ‘순환 대기’를 해소하려면 포크에 우선 순위를 매기는 방법이 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
-끝-
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;center&gt;
이 글은 &lt;b&gt;https://preamtree.tistory.com/18&lt;/b&gt; 을 재구성하여 작성됐습니다.&lt;br /&gt;
&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;&lt;img alt=&quot;크리에이티브 커먼즈 라이선스&quot; style=&quot;border-width:0&quot; src=&quot;https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png&quot; /&gt;&lt;/a&gt;
&lt;/center&gt;</content>

      
      
      
      
      

      <author>
          <name>preamtree</name>
        
        
      </author>

      

      
        <category term="Studying Programming" />
      

      
        <summary type="html">교착상태(DeadLock) 는 두 개 이상의 작업이 서로 상대방의 작업이 끝나기 만을 기다리고 있기 때문에 결과적으로 아무것도 완료되지 못하는 상태를 가리킨다. 컴퓨터 쪽으로 해석을 해 본다면, 운영체제나 소프트웨어가 자원(Resource)관리를 잘못하여 둘 이상의 프로그램이 다운되거나 운영체제가 멈춰버리는 현상이다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">MVC패턴과 모델1, 모델2</title>
      <link href="https://congchu.github.io" rel="alternate" type="text/html" title="MVC패턴과 모델1, 모델2" />
      <published>2019-02-05T17:00:00+07:00</published>
      <updated>2019-02-05T17:00:00+07:00</updated>
      <id>https://congchu.github.io//preamtree-mvc-pattern</id>
      <content type="html" xml:base="https://congchu.github.io/{| absolute_url | xml_escape }}">&lt;p&gt;MVC패턴은 웹 애플리케이션 개발 방법론(혹은 아키택쳐) 중 하나로 유명하다. 웹 프레임워크의 대부분은 MVC패턴을 채택하고 있다. 이 글에서는 MVC와 MVC패턴의 모델1, 모델2에 대해 간략하게 다룬다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;
&lt;a href=&quot;https://preamtree.tistory.com/11&quot; targer=&quot;_blank&quot;&gt;
&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/2452883B57F0B3C02B&quot; alt=&quot;그림1&quot; /&gt;
&lt;/a&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;mvc란&quot;&gt;MVC란?&lt;/h3&gt;
&lt;p&gt;먼저 모델(Model), 뷰(View), 컨트롤러(Controller)에 대한 정의를 내리면 다음과 같다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Model&lt;/b&gt;: 데이터를 가진 객체, 파라미터로 자주 쓰인다. DB의 테이블과 대응하는 경우가 많다.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;View&lt;/b&gt;: UI를 담당한다. 클라이언트 측 기술인 Html, Css, Javascript등으로 만들어진 컨테이너이다.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Controller&lt;/b&gt;: UI를 통한 사용자의 입력 명령에 응답하고, 및 데이터 흐름 제어를 담당한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
MVC의 흐름에 대해 간략히 설명하면 다음과 같다. 사용자(User)는 컨트롤러(Controller)를 사용(Uses)하여 웹 애플리케이션을 다룰 수 있다. 컨트롤러는 사용자의 요청에 맞는 데이터를 모델(Model)에 요청한다.(Manipulates) 뷰(View)는 모델이 리턴한 결과를 반영한다(Updates)&lt;/p&gt;

&lt;p&gt;그림과 설명에서 유추할 수 있겠지만, MVC패턴의 최대 장점은 &lt;strong&gt;사용자에게 보여지는 프레젠테이션 영역과 비즈니스 로직, 데이터 구조가 서로 완전히 분리되어 있다는 점&lt;/strong&gt;이다. 프레젠테이션 영역은 다른 영역에 비해 수정이 매우 잦다는 것을 감안한다면 어느정도의 장점인지 알 수 있을 것이다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;모델1-vs-모델2&quot;&gt;모델1 vs 모델2&lt;/h3&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;center&gt;
&lt;a href=&quot;https://preamtree.tistory.com/11&quot; targer=&quot;_blank&quot;&gt;
&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/270EFE4C57F0C7A61C&quot; alt=&quot;그림2&quot; /&gt;
&lt;/a&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br /&gt;
한편, 모델1과 모델2는 MVC를 구현하는 방식이라고 할 수 있다. 먼저 모델1과 모델2의 정의는 아래와 같다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;모델1&lt;/b&gt;: 비즈니스 로직 영역(Controller)에 프레젠테이션 영역(View)을 같이 구현하는 방식이다.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;모델2&lt;/b&gt;: 비즈니스 로직 영역과 프레젠테이션 영역이 분리되어 있는 구현 방식이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
JAVA로 예를 들어 설명해보겠다. 모델1은 JSP에 비즈니스 로직과 프레젠테이션 영역을 함께 구현하는 방식이다. 이 방식은 비즈니스 로직이 복잡하지 않을 때 주로 쓰인다. 모델1 방식을 채택하면 빠르고 쉽게 개발할 수 있다는 장점이 있다. 하지만, JSP 파일 자체가 너무 비대해지고, Controller와 View가 혼재하므로 향후 유지보수에 어려움을 겪을 수 있다.&lt;/p&gt;

&lt;p&gt;모델2 방식은 View와 Controller를 분리하는 방식이다. 그래서 디자이너와 개발자의 분업이 가능하며 유지보수에 유리하다. 요즘 웹 개발의 메인스트림(?) 이라고 할 수 있는 REST가 바로 이 방식이다. 하지만 설계에서 어려움을 겪을 수 있고, 개발 난이도가 높다는 단점이 있다.&lt;/p&gt;

&lt;p&gt;모델1과 모델2를 비교한 내용을 표로 정리하면 다음과 같다.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;구분&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;모델1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;모델2&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;컨트롤러와&lt;br /&gt;뷰의 분리 여부&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;통합&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;분리&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;장점&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;쉽고빠른개발&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;분업에 유리함&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;단점&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;유지보수가어려움&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;설계가 어려움&lt;br /&gt;개발 난이도가 높음&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
사실, 모델1 방식으로 웹 서비스를 개발하는 사례는 아예 없다고 봐도 무방하다. 지금은 프론트엔드 개발자와 백엔드 개발자의 역할이 명확해졌고, 모델1은 백엔드와 프론트엔드 역할 분담이 모호해서 오히려 협업에 걸림돌이 되기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
-끝-
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;center&gt;
이 글은 &lt;b&gt;https://preamtree.tistory.com/11&lt;/b&gt; 을 재구성하여 작성됐습니다.&lt;br /&gt;
&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;&lt;img alt=&quot;크리에이티브 커먼즈 라이선스&quot; style=&quot;border-width:0&quot; src=&quot;https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png&quot; /&gt;&lt;/a&gt;
&lt;/center&gt;</content>

      
      
      
      
      

      <author>
          <name>preamtree</name>
        
        
      </author>

      

      
        <category term="Studying Programming" />
      

      
        <summary type="html">MVC패턴은 웹 애플리케이션 개발 방법론(혹은 아키택쳐) 중 하나로 유명하다. 웹 프레임워크의 대부분은 MVC패턴을 채택하고 있다. 이 글에서는 MVC와 MVC패턴의 모델1, 모델2에 대해 간략하게 다룬다.</summary>
      

      
      
    </entry>
  
</feed>
